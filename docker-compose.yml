version: '3.9'

services:
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for hot reload during development
      - .:/app
      # Persist SQLite database
      - ./data:/data
    environment:
      - DJANGO_SETTINGS_MODULE=notification_service.settings
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - SECRET_KEY=dev-secret-key-change-in-production
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=
      # Rate limiting configuration
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      # Add other environment variables as needed
    stdin_open: true
    tty: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health/')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Uncomment when you add PostgreSQL
  # postgres:
  #   image: postgres:16-alpine
  #   container_name: notification-db
  #   environment:
  #     - POSTGRES_DB=notification_db
  #     - POSTGRES_USER=notification_user
  #     - POSTGRES_PASSWORD=notification_password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: notification-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rq-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: notification-rq-worker
    command: python -m django_rq.management.commands.rqworker default high low
    volumes:
      - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=notification_service.settings
      - DEBUG=True
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=
      # Email configuration
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  redis_data:
