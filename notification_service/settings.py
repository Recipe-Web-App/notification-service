"""Django settings for notification_service project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file (local development)
# In production/K8s, .env won't exist and K8s env vars will be used
env_path = BASE_DIR / ".env"
load_dotenv(dotenv_path=env_path, override=False)

# Logging Configuration
# These environment variables configure the structlog-based logging system
LOG_FILE_PATH = os.getenv(
    "LOG_FILE_PATH", str(BASE_DIR / "logs" / "notification-service.log")
)
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
SERVICE_NAME = os.getenv("SERVICE_NAME", "notification-service")
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")

# Initialize structlog logging configuration
# This must be done early, before any logging occurs
from core.logging import setup_logging  # noqa: E402

setup_logging()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-(s35utk=+7u0o73z_b46dx0d4@n8&2#)f+5(r4eq(5)l%9(ld#"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1", "notification-service.local", "*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "core",
]


# This service does not own the database schema - disable all migrations
class DisableMigrations:
    """Disable migrations for all apps.

    This allows the service to start without a database connection,
    which is required for the degraded mode health check pattern.
    """

    def __contains__(self, item):
        return True

    def __getitem__(self, item):
        return None


MIGRATION_MODULES = DisableMigrations()

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "core.middleware.request_id.RequestIDMiddleware",  # First for tracing
    "core.middleware.process_time.ProcessTimeMiddleware",  # Track duration
    "corsheaders.middleware.CorsMiddleware",  # CORS early
    "django.middleware.common.CommonMiddleware",
    "core.middleware.rate_limit.RateLimitMiddleware",  # Rate limit after ID
    "core.middleware.security_headers.SecurityHeadersMiddleware",  # Security
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "notification_service.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "notification_service.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB", "recipe_database"),
        "USER": os.environ.get(
            "NOTIFICATION_SERVICE_DB_USER", "notification_service_user"
        ),
        "PASSWORD": os.environ.get("NOTIFICATION_SERVICE_DB_PASSWORD", ""),
        "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
        "OPTIONS": {
            "options": (
                f"-c search_path={os.environ.get('POSTGRES_SCHEMA', 'recipe_manager')}"
            ),
            "connect_timeout": 5,
        },
        "CONN_MAX_AGE": 60,  # Keep connections alive for 60 seconds
        "CONN_HEALTH_CHECKS": True,  # Enable connection health checks
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# Empty list - this service does not handle authentication
AUTH_PASSWORD_VALIDATORS: list = []


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django REST Framework settings
# Authentication disabled for now - will be configured when auth-service is integrated
REST_FRAMEWORK: dict[str, list | None | str] = {
    "DEFAULT_AUTHENTICATION_CLASSES": [],
    "DEFAULT_PERMISSION_CLASSES": [],
    "UNAUTHENTICATED_USER": None,
    "EXCEPTION_HANDLER": "core.exceptions.handlers.custom_exception_handler",
}

# Redis Configuration
# Used for caching and rate limiting
REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")
REDIS_PORT = int(os.environ.get("REDIS_PORT", "6379"))
REDIS_DB = int(os.environ.get("REDIS_DB", "0"))
REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD", "")

# Build Redis URL with optional password
if REDIS_PASSWORD:
    REDIS_URL = f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"
else:
    REDIS_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SOCKET_CONNECT_TIMEOUT": 5,
            "SOCKET_TIMEOUT": 5,
            "RETRY_ON_TIMEOUT": True,
            "MAX_CONNECTIONS": 50,
        },
    }
}

# Rate Limiting Configuration
RATE_LIMIT_REQUESTS = int(os.environ.get("RATE_LIMIT_REQUESTS", "100"))
RATE_LIMIT_WINDOW = int(os.environ.get("RATE_LIMIT_WINDOW", "60"))

# CORS Configuration
CORS_ALLOWED_ORIGINS = os.environ.get(
    "CORS_ALLOWED_ORIGINS",
    "http://localhost:3000,http://localhost:5173",
).split(",")

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "x-request-id",
]
