name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs for the same workflow and ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.14'

# Set minimal permissions
permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # For SARIF uploads

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run Django checks
      run: poetry run python manage.py check

    - name: Check for missing migrations
      run: poetry run python manage.py makemigrations --check --dry-run --no-input

    - name: Run migrations
      run: poetry run python manage.py migrate --no-input

    - name: Run tests with coverage
      run: poetry run python manage.py test --no-input --verbosity=2
      env:
        DJANGO_SETTINGS_MODULE: notification_service.settings

    - name: Install security tools
      run: |
        poetry add --group dev bandit safety --no-interaction

    - name: Run bandit security scanner
      continue-on-error: true
      run: poetry run bandit -r notification_service/ core/ -f sarif -o bandit-results.sarif

    - name: Upload bandit SARIF results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-results.sarif

  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install linting tools
      run: |
        poetry add --group dev black flake8 mypy django-stubs --no-interaction
        poetry install --no-interaction

    - name: Run black (code formatter check)
      run: poetry run black --check .

    - name: Run flake8 (linter)
      run: poetry run flake8 notification_service/ core/ --max-line-length=120 --extend-ignore=E203,W503

    - name: Run mypy (type checker)
      continue-on-error: true
      run: poetry run mypy notification_service/ core/ --ignore-missing-imports

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test)
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: notification-service:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
